{"version":3,"sources":["../../src/api/index.js"],"names":["config","api","web3","Web3","providers","HttpProvider","get","req","res","json","apiInstructions","wallet","eth","accounts","create","balanceSchema","address","params","getBalance","balance","post","txSchema","next","body","privateKey","destination","amount","privateKeyBuffer","Buffer","destinationAddress","privateKeyToAccount","publicAddress","axios","gasPrices","getTransactionCount","nonce","txValue","utils","toHex","toWei","toString","rawTx","data","safeLow","estimateGas","gas","defaultAccount","tx","EthereumTx","sign","serializedTx","serialize","sendSignedTransaction","txDetails"],"mappings":"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","file":"index.js","sourcesContent":["import { apiInstructions, balanceSchema, validateAddress, txSchema } from '../lib/util';\nimport axios from 'axios';\nimport 'babel-polyfill';\nimport EthereumTx from 'ethereumjs-tx';\nimport { Router } from 'express';\nimport { default as Web3 } from 'web3';\nimport validate from 'express-validation';\n\nexport default ({ config }) => {\n    let api = Router();\n    const web3 = new Web3( new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/\") );\n\n    api.get('/', (req, res) => {\n        res.json( apiInstructions );\n    });\n\n    // Generate a new Ethereum wallet and return an object with the private key and the public ETH address\n    api.get('/createWallet', (req, res) => {\n        let wallet = web3.eth.accounts.create();\n        res.json(wallet);\n    });\n\n    //Get the balance of an ethereum address\n    api.get('/getBalance/:address', validate(balanceSchema), async (req, res) => {\n        const address = validateAddress(req.params.address);\n\n        const balance = await web3.eth.getBalance(address);\n        res.json({ balance, \"units\": \"wei\" });\n    });\n\n    // Creates a transaction to send ETH from one address to another\n    api.post('/transaction', validate(txSchema), async (req, res, next) => {\n        const { privateKey, destination, amount } = req.body;\n        const privateKeyBuffer   = new Buffer(privateKey, 'hex');\n        const destinationAddress = validateAddress(destination);\n\n        const publicAddress      = await web3.eth.accounts.privateKeyToAccount(\"0x\" + privateKey).address;\n        const gasPrices          = await axios.get('https://ethgasstation.info/json/ethgasAPI.json');\n        const nonce              = await web3.eth.getTransactionCount(publicAddress);\n        const txValue            = web3.utils.toHex( web3.utils.toWei(amount.toString(), 'ether') );\n\n        let rawTx  = {\n                \"to\": destinationAddress,\n                \"value\": txValue,\n                \"gasPrice\": gasPrices.data.safeLow * 100000000,\n                \"nonce\": nonce,\n                \"chainId\": 4    // EIP 155 chainId - mainnet: 1, rinkeby: 4\n            }\n        rawTx.gas                = await web3.eth.estimateGas(rawTx)\n        web3.eth.defaultAccount  = publicAddress;\n\n        const tx                 = new EthereumTx(rawTx);\n        tx.sign( privateKeyBuffer );\n        const serializedTx       = tx.serialize();\n        const txDetails          = await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\n        res.json(txDetails);\n    });\n\n    return api;\n}\n"]}