{"version":3,"sources":["../../src/lib/util.js"],"names":["toRes","res","status","console","log","err","thing","send","toObject","json","validateAddress","Web3","utils","isAddress","input","Error","balanceSchema","params","address","Joi","string","required","txSchema","body","privateKey","destination","amount","number","positive","apiInstructions"],"mappings":";;;;;;QAYgBA,K,GAAAA,K;;AAZhB;;;;AACA;;;;;;AAEA;;;;;;;;;AASO,SAASA,KAAT,CAAeC,GAAf,EAAgC;AAAA,QAAZC,MAAY,uEAAL,GAAK;;;AAEtCC,YAAQC,GAAR,CAAY,QAAZ,EAAsBH,GAAtB;;AAEA,WAAO,UAACI,GAAD,EAAMC,KAAN,EAAgB;AACtB,YAAID,GAAJ,EAAS,OAAOJ,IAAIC,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqBF,GAArB,CAAP;;AAET,YAAIC,SAAS,OAAOA,MAAME,QAAb,KAAwB,UAArC,EAAiD;AAChDF,oBAAQA,MAAME,QAAN,EAAR;AACA;AACDP,YAAIC,MAAJ,CAAWA,MAAX,EAAmBO,IAAnB,CAAwBH,KAAxB;AACA,KAPD;AAQA;;AAEM,IAAMI,4CAAkB,SAAlBA,eAAkB,QAAS;AACvC,QAAK,CAACC,cAAKC,KAAL,CAAWC,SAAX,CAAqBC,KAArB,CAAN,EAAoC;AACnC,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACA;AACD,WAAOD,KAAP;AACA,CALM;;AAOA,IAAME,wCAAgB;AACzBC,YAAQ;AACJC,iBAASC,cAAIC,MAAJ,GAAaC,QAAb;AADL;AADiB,CAAtB;;AAMA,IAAMC,8BAAW;AACpBC,UAAM;AACFC,oBAAYL,cAAIC,MAAJ,GAAaC,QAAb,EADV;AAEFI,qBAAaN,cAAIC,MAAJ,GAAaC,QAAb,EAFX;AAGFK,gBAAQP,cAAIQ,MAAJ,GAAaC,QAAb;AAHN;AADc,CAAjB;;AAQA,IAAMC,4CAAkB;AAC3B,WAAO,iEADoB;AAEvB,cAAU;AACN,yBAAiB;AACb,oBAAQ,KADK;AAEb,0BAAc,MAFD;AAGb,uBAAW;AACP,8BAAc,QADP;AAEP,iCAAiB;AAFV;AAHE,SADX;AASN,6BAAqB;AACjB,oBAAQ,KADS;AAEjB,0BAAc,wCAFG;AAGjB,uBAAW;AACP,8BAAc,QADP;AAEP,iCAAiB;AAFV;;AAHM,SATf;AAkBN,wBAAgB;AACZ,oBAAQ,MADI;AAEZ,0BAAc;AACV,8BAAc,4CADJ;AAEV,+BAAe,wCAFL;AAGV,0BAAU;AAHA,aAFF;AAOZ,uBAAW;AACP,8BAAc,QADP;AAEP,iCAAiB;AAFV;AAPC;AAlBV;AAFa,CAAxB","file":"util.js","sourcesContent":["import Joi from 'joi';\nimport { default as Web3 } from 'web3';\n\n/**\tCreates a callback that proxies node callback style arguments to an Express Response object.\n *\t@param {express.Response} res\tExpress HTTP Response\n *\t@param {number} [status=200]\tStatus code to send on success\n *\n *\t@example\n *\t\tlist(req, res) {\n *\t\t\tcollection.find({}, toRes(res));\n *\t\t}\n */\nexport function toRes(res, status=200) {\n\n\tconsole.log('util =', res)\n\t\n\treturn (err, thing) => {\n\t\tif (err) return res.status(500).send(err);\n\n\t\tif (thing && typeof thing.toObject==='function') {\n\t\t\tthing = thing.toObject();\n\t\t}\n\t\tres.status(status).json(thing);\n\t};\n}\n\nexport const validateAddress = input => {\n\tif ( !Web3.utils.isAddress(input) ) {\n\t\tthrow new Error('Invalid Ethereum address');\n\t}\n\treturn input;\n}\n\nexport const balanceSchema = {\n    params: {\n        address: Joi.string().required()\n    }\n}\n\nexport const txSchema = {\n    body: {\n        privateKey: Joi.string().required(),\n        destination: Joi.string().required(),\n        amount: Joi.number().positive()\n    }\n}\n\nexport const apiInstructions = {\n    \"use\": \"an api for basic wallet functionalities on the ethereum network\",\n        \"routes\": {\n            \"/createWallet\": {\n                \"type\": \"GET\",\n                \"paramaters\": \"none\",\n                \"returns\": {\n                    \"privateKey\": \"string\",\n                    \"publicAddress\": \"string\"\n                }\n            },\n            \"/getBalance:param\": {\n                \"type\": \"GET\",\n                \"paramaters\": \"string - valid public Ethereum address\",\n                \"returns\": {\n                    \"privateKey\": \"string\",\n                    \"publicAddress\": \"string\"\n                }\n\n            },\n            \"/transaction\": {\n                \"type\": \"POST\",\n                \"paramaters\": {\n                    \"privateKey\": \"string - valid private Ethereum wallet key\",\n                    \"destination\": \"string - valid public Ethereum address\",\n                    \"amount\": \"number - amount of Ethereum to send (unit Eth)\"\n                },\n                \"returns\": {\n                    \"privateKey\": \"string\",\n                    \"publicAddress\": \"string\"\n                }\n            }\n        }\n    }\n\n"]}